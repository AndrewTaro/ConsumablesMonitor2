(def element ShipNameItem (_markerEntity:gfx) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'avatar')
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var shipName:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")
		(var consData:array = "dataComponent ? dataComponent.data['consMonitor']: []" (event "dataComponent.evChanged"))
	)
	(style
		(align = "middle|center")
	)
	(element ShipNameConsumablesRenderer "consData")
	(element SimpleMarkerTextItem "shipName")
)

(def element BuildingNameItem (_markerEntity:gfx) layout=true
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'building')
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var buildingName:str = "buildingComponent 	? buildingComponent.name	? tr(buildingComponent.name)
																				: buildingComponent.typeIDS
													: ''")
		(var consData:array = "dataComponent ? dataComponent.data['consMonitor']: []" (event "dataComponent.evChanged"))	
	)
	(style
		(align = "middle|center")
	)
	(element ShipNameConsumablesRenderer "consData")
	(element SimpleMarkerTextItem "toUpper(buildingName)")
)

(def element ShipNameConsumablesRenderer(_consData:array) layout=true
	(hblock
		(controller $Repeat renderer='ShipNameConsumableItem' layout=true
			(bind count "_consData.length")
			(args "_consData[$index]")
		)
	)
	(style
		(width = 0)
		(align = "middle|center")
	)
)

(def constant CM2_APPEAR_SETTINGS {
	DURATION:	0.5,
	HEIGHT_MAX:	-30,
	HEIGHT_MIN:	0.0,
	ALPHA_MIN:	0.0,
	ALPHA_MAX:	1.0
})
(def constant CM2_DEFAULT_SETTINGS {
	HEIGHT:	0.0,
	ALPHA:	1.0
})
(def constant CM2_ENDING_SETTINGS {
	DURATION:	15.0,
	BLINK:		1.0,
	ALPHA_MIN:	0.4,
	ALPHA_MAX:	1.0
})
(def constant CM2_STATE_COLORS {
	SC.Battle.CONSUMABLE_STATES.READY			: "SC.Ui_styles.SERVICE_COLORS.WHITE",
	SC.Battle.CONSUMABLE_STATES.SELECTED		: "SC.Ui_styles.SERVICE_COLORS.WHITE",
	SC.Battle.CONSUMABLE_STATES.AT_WORK			: "SC.Ui_styles.SERVICE_COLORS.GREEN",
	SC.Battle.CONSUMABLE_STATES.RELOAD			: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
	SC.Battle.CONSUMABLE_STATES.NO_AMMO			: "SC.Ui_styles.SERVICE_COLORS.RED",
	SC.Battle.CONSUMABLE_STATES.PREPARATION		: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
	SC.Battle.CONSUMABLE_STATES.REGENERATION	: "SC.Ui_styles.SERVICE_COLORS.ORANGE",
})

(def constant TT_CONSUMABLESMONITOR_INSTALLED true)

(def element ShipNameConsumableItem (_consData:dict) layout=true
	(scope
		(event evPlayActivatedAnimation)
		(event evPlayAboutToEndAnimation)
		(event evPlayEndingAnimation)

		(var consIconPath:str = "'url:../consumables/consumable_' + _consData.icon + '.png'")
		(var consNum:str = "_consData.num")
		(var consState:number = "_consData.currentState")
		(var stateStr:str = "toString(consState)")
		(var consEndTime:number = "_consData.endTime")
		(var isConsAvailable:bool = "_consData.isEnabled")
		
		(var isReady:bool = "consState == SC.Battle.CONSUMABLE_STATES.READY")
		(var isActive:bool = "consState == SC.Battle.CONSUMABLE_STATES.AT_WORK")
		(var isReload:bool = "consState == SC.Battle.CONSUMABLE_STATES.RELOAD")
		(var isEmpty:bool = "consState == SC.Battle.CONSUMABLE_STATES.NO_AMMO")
		(var isPreparation:bool = "consState == SC.Battle.CONSUMABLE_STATES.PREPARATION")
		(var isRegenerating:bool = "consState == SC.Battle.CONSUMABLE_STATES.REGENERATION")
		
		(var consStateColor:number = "stateStr in CM2_STATE_COLORS ? CM2_STATE_COLORS[stateStr] : SC.Ui_styles.SERVICE_COLORS.WHITE")

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var consStateTime:number = "consEndTime - timer.currentTime" (event "timer.evFrequent"))

		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var isTactical:bool = "camera.isTactical" (event "camera.evTacticalStateChanged"))
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))
		(var altVisionEnabled:bool = "altVision && !isTactical")

		(var floatDigits:number = "consStateTime < 10 ? 1 : 0")
		(var consStateStr:str = "	isReady ? 'RDY' :
									isEmpty ? '--'
											: countdownFormat(consStateTime, floatDigits)")
		(var consNumStr:str = "	consNum != 'inf' ? 'x' + consNum
												 : ' '")

		(var isConsumableAboutToEnd:bool = "isActive && (consStateTime <= CM2_ENDING_SETTINGS.DURATION)")
		(var isConsumableEnding:bool = "isActive && (consStateTime <= CM2_APPEAR_SETTINGS.DURATION)")

		(var animatedIconAlpha:number = "CM2_DEFAULT_SETTINGS.ALPHA" watch=false)
		(var animatedIconMargin:number = "CM2_DEFAULT_SETTINGS.HEIGHT" watch=false)
		(var isActivatedAnimationPlaying:bool = "false" watch=false)

		(controller $Animation
			(bindcall play  duration="CM2_APPEAR_SETTINGS.DURATION"
							easing="Easing.cubic_out"
							from="{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN, animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MAX }"
							to=	 "{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MAX, animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MIN }"
							(bind enabled "isActive")
							(event "evPlayActivatedAnimation")
			)
			(bind isActivatedAnimationPlaying	"true"  init=false on=evAnimStarted)
			(bind isActivatedAnimationPlaying	"false" init=false on=evAnimEnded)
		)
		(controller $Animation
			(bindcall play  id='aboutToEndAnim'
							duration="CM2_ENDING_SETTINGS.BLINK"
							repeatCount=-1
							easing="Easing.sine_in"
							from="{ animatedIconAlpha: CM2_ENDING_SETTINGS.ALPHA_MAX }"
							to=  "{ animatedIconAlpha: CM2_ENDING_SETTINGS.ALPHA_MIN }"
							(bind enabled "isConsumableAboutToEnd && !isActivatedAnimationPlaying")
							(event "evPlayAboutToEndAnimation")
			)
			(bindcall stop id='aboutToEndAnim' (event "evPlayEndingAnimation"))
		)
		(controller $Animation
			(bindcall play  duration="CM2_APPEAR_SETTINGS.DURATION"
							to=	 "{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN,	 animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MAX }"
							easing="Easing.cubic_out"
							(bind enabled "isConsumableEnding")
							(event "evPlayEndingAnimation")
			)
			(bind animatedIconAlpha		"CM2_DEFAULT_SETTINGS.ALPHA" init=false on=evAnimEnded)
			(bind animatedIconMargin	"CM2_DEFAULT_SETTINGS.HEIGHT" init=false on=evAnimEnded)
		)

		(var colorValue:number = "isConsAvailable ? 0.8 :
										  isEmpty ? 0.5
										  		  : 1.0")
		(var iconColorTransform:dict = "{ redMultiplier: colorValue, greenMultiplier: colorValue, blueMultiplier: colorValue, alphaMultiplier: animatedIconAlpha}")
	)

	(dispatch evPlayActivatedAnimation (bind trigger "isActive") (bind enabled "!isActive"))
	(dispatch evPlayAboutToEndAnimation (bind enabled "isConsumableAboutToEnd && !isActivatedAnimationPlaying"))
	(dispatch evPlayEndingAnimation (bind trigger "isConsumableEnding") (bind enabled "isConsumableEnding"))

	(hblock
		(block
			(bind visible "isActive || altVisionEnabled")
			(style
				(bind backgroundImage "consIconPath")
				(backgroundSize = "fill")
				(width = 24px)
				(height = 24px)
				(bind visualOffsetY "animatedIconMargin")
			)
			(bind colorTransform "iconColorTransform")
		)
		(block
			(bind visible "altVisionEnabled")
			(style
				(width = 18px)
			)
			(element ConsumableMarkerTextItem "consStateStr" "consStateColor")
			(element ConsumableMarkerTextItem "consNumStr" "consStateColor")
		)
	)
)

(def element ConsumableMarkerTextItem (_value:str, _color:number) layout=true
	(style
		(height = 12px)
		(align = "middle|center")
	)
	(tf
		(class $WorldMarkerTextItem)
		(style
			(bind noTranslate "false")
			(bind textColor "_color")
		)
		(bind text "_value")
	)
)